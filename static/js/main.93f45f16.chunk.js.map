{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","imdbLink","titleError","imgUrlError","imdbLinkError","imdbIdError","onChange","event","setState","target","name","value","onBlur","input","errorName","this","addMovie","props","onSubmit","preventDefault","resetState","htmlFor","type","placeholder","autoComplete","required","pattern","Component","App","moviesFromServer","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93f45f16.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbLink: '',\n    imdbId: '',\n    titleError: false,\n    imgUrlError: false,\n    imdbLinkError: false,\n    imdbIdError: false,\n  };\n\n  onChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  onBlur = (input, errorName) => {\n    if (input === '') {\n      this.setState({\n        [errorName]: true,\n      });\n    }\n  }\n\n  resetState() {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbLink: '',\n      imdbId: '',\n      titleError: false,\n      imgUrlError: false,\n      imdbLinkError: false,\n      imdbIdError: false,\n    });\n  }\n\n  render() {\n    const { addMovie } = this.props;\n    const { titleError, imgUrlError, imdbLinkError, imdbIdError } = this.state;\n\n    return (\n      <form\n        className=\"form\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          addMovie(this.state);\n          this.resetState();\n        }}\n      >\n        <label htmlFor=\"title\">Title:</label>\n        <input\n          type=\"text\"\n          value={this.state.title}\n          name=\"title\"\n          placeholder=\"Title\"\n          autoComplete=\"off\"\n          required\n          onChange={(event) => {\n            this.onChange(event);\n          }}\n          onBlur={() => {\n            this.onBlur(this.state.title, 'titleError');\n          }}\n        />\n\n        {titleError && (\n          <p>This field should not be empty</p>\n        )}\n\n        <label htmlFor=\"description\">Description:</label>\n        <textarea\n          type=\"text\"\n          value={this.state.description}\n          name=\"description\"\n          placeholder=\"Description\"\n          autoComplete=\"off\"\n          onChange={(event) => {\n            this.onChange(event);\n          }}\n        />\n\n        <label htmlFor=\"imgUrl\">Image:</label>\n        <input\n          type=\"url\"\n          value={this.state.imgUrl}\n          name=\"imgUrl\"\n          placeholder=\"https://example.com\"\n          pattern=\"https://.*\"\n          autoComplete=\"off\"\n          required\n          onChange={(event) => {\n            this.onChange(event);\n          }}\n          onBlur={() => {\n            this.onBlur(this.state.imgUrl, 'imgUrlError');\n          }}\n        />\n\n        {imgUrlError && (\n          <p>This field should not be empty</p>\n        )}\n\n        <label htmlFor=\"imdbLink\">IMDb link:</label>\n        <input\n          type=\"url\"\n          value={this.state.imdbLink}\n          name=\"imdbLink\"\n          placeholder=\"https://example.com\"\n          pattern=\"https://.*\"\n          autoComplete=\"off\"\n          required\n          onChange={(event) => {\n            this.onChange(event);\n          }}\n          onBlur={() => {\n            this.onBlur(this.state.imdbLink, 'imdbLinkError');\n          }}\n        />\n\n        {imdbLinkError && (\n          <p>This field should not be empty</p>\n        )}\n\n        <label htmlFor=\"imdbId\">IMDb id:</label>\n        <input\n          type=\"text\"\n          value={this.state.imdbId}\n          name=\"imdbId\"\n          placeholder=\"id\"\n          autoComplete=\"off\"\n          required\n          onChange={(event) => {\n            this.onChange(event);\n          }}\n          onBlur={() => {\n            this.onBlur(this.state.imdbId, 'imdbIdError');\n          }}\n        />\n\n        {imdbIdError && (\n          <p>This field should not be empty</p>\n        )}\n\n        <button type=\"submit\">save</button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(prevState => ({\n      movies: [...prevState.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}